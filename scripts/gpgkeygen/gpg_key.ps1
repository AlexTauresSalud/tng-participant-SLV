
# Check for gpg installation
if (-not (Get-Command gpg -ErrorAction SilentlyContinue)) {
    Write-Host "gpg could not be found, please install it first."
    exit 1
}

# Prompt user for name and email
$nameReal = Read-Host "Enter your name"
$nameEmail = Read-Host "Enter your email"
$passphrase = Read-Host "Enter a passphrase" -AsSecureString
$passphrasePlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($passphrase))

# Set default values for key generation
$keyType = "RSA"
$keyLength = "4096"
$subkeyType = "RSA"
$subkeyLength = "4096"
$expirationDate = "0" # 0 means key does not expire
$nameComment="Generated by script"

# Create a temporary batch file for key generation
$gpgBatch = [System.IO.Path]::GetTempFileName()
@"
%echo Generating a basic OpenPGP key
Key-Type: $keyType
Key-Length: $keyLength
Subkey-Type: $subkeyType
Subkey-Length: $subkeyLength
Name-Real: $nameReal
Name-Comment: $nameComment
Name-Email: $nameEmail
Expire-Date: $expirationDate
Passphrase: $passphrasePlain
Key-Usage: sign,cert
%commit
%echo done
"@ | Out-File -FilePath $gpgBatch -Encoding ASCII

# Generate the GPG key
Start-Process gpg -ArgumentList "--batch --gen-key `"$gpgBatch`"" -Wait

# Clean up the batch file
Remove-Item $gpgBatch

# Extract the latest key ID using --list-secret-keys
$keyInfo = & gpg --list-secret-keys --with-colons $nameEmail | Where-Object { $_ -match "^sec" }
$keyEntries = @()
foreach ($key in $keyInfo) {
    $fields = $key -split ":"
    $keyID = $fields[4]
    $keyDate = $fields[5]
    $keyEntries += [PSCustomObject]@{ KeyID = $keyID; Date = $keyDate }
}
$latestKey = $keyEntries | Sort-Object -Property Date -Descending | Select-Object -First 1

$keyID = $latestKey.KeyID

if (-not $keyID) {
    Write-Host "Failed to extract the GPG key ID."
    exit 1
}

#Write-Host "GPG key generation completed. Your key ID is: $keyID"

# # Export the public key to a file
$outputFile = "gpg_key_$keyID.txt"
gpg --armor --export $keyID > $outputFile

Write-Host "Your public key has been saved to $outputFile"
